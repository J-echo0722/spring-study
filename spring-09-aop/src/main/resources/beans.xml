<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
            https://www.springframework.org/schema/beans/spring-beans.xsd
            http://www.springframework.org/schema/aop
            https://www.springframework.org/schema/aop/spring-aop.xsd">

    <bean id="userService" class="com.mj.service.UserServiceImpl"/>

<!--
    &lt;!&ndash; 方式一，利用原生 Spring Api 接口&ndash;&gt;
    <bean id="beforeLog" class="com.mj.log.BeforeLog"/>
    <bean id="afterLog" class="com.mj.log.AfterLog"/>
    &lt;!&ndash; 配置aop：需要导入 aop 的约束&ndash;&gt;
    <aop:config>
        &lt;!&ndash; 切入点：expression：表达式，execution（要执行的未知：* * * * * 修饰词 返回类型 类名 方法名 参数）&ndash;&gt;
        <aop:pointcut id="pointcut" expression="execution(* com.mj.service.UserServiceImpl.*(..))"/>
        <aop:advisor advice-ref="beforeLog" pointcut-ref="pointcut"/>
        <aop:advisor advice-ref="afterLog" pointcut-ref="pointcut"/>
    </aop:config>
-->

<!--
    &lt;!&ndash; 方式二：自定义切面类实现 AOP &ndash;&gt;
    <bean id="diy" class="com.mj.diy.DiyPointCut"/>

    <aop:config>
        &lt;!&ndash; 自定义切面， ref 要引入的类&ndash;&gt;
        <aop:aspect ref="diy">
            &lt;!&ndash; 切入点 &ndash;&gt;
            <aop:pointcut id="point" expression="execution(* com.mj.service.UserServiceImpl.*(..))"/>
            &lt;!&ndash; 通知 &ndash;&gt;
            <aop:before method="before" pointcut-ref="point"/>
            <aop:after method="after" pointcut-ref="point"/>
        </aop:aspect>
    </aop:config>
-->

    <!-- 方式三：注解实现 AOP -->
    <bean id="annotationPointCut" class="com.mj.diy.AnnotationPointCut"/>
    <!-- 开启注解支持，JDK 默认 proxy-target-class="false"， cglib 默认 proxy-target-class="true"-->
    <aop:aspectj-autoproxy proxy-target-class="false"/>

</beans>